# -*- coding: utf-8 -*-
"""ML_Assignment_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zWFu-Im0xei6nfpeOakJ3GWF-uYyXXaZ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.dummy import DummyClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn import metrics
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import scale
# %matplotlib inline

df= pd.read_csv('/content/sample_data/WA_Fn-UseC_-HR-Employee-Attrition.csv')
df.head()

df.isnull().sum()

df.describe() #Droping features which have no correlation

df.drop(['EmployeeCount', 'EmployeeNumber', 'Over18', 'StandardHours'], axis="columns", inplace=True) #These features have very less correction

def corrcof(a,b):
    return np.array(np.cov(a,b)/ (np.std(a) * np.std(b)))
def convert(d):
        switcher = {
            'Yes': 1,
            'No':  0,
            'Married' : 2,
            'Single' : 1,
            'Divorced' : 0}
        return switcher.get(d)
df["Attrition"] = df["Attrition"].apply(convert)
df["OverTime"] = df["OverTime"].apply(convert)
df["MaritalStatus"] = df["MaritalStatus"].apply(convert)
df.head()

#Logistic Regression

df.Attrition.value_counts()/1470*100

df.groupby("Attrition").mean()

pd.crosstab(df.Attrition, df.OverTime).plot.bar()
pd.crosstab(df.Attrition, df.EnvironmentSatisfaction).plot.bar()
pd.crosstab(df.Attrition, df.JobSatisfaction).plot.bar()
pd.crosstab(df.Attrition, df.JobInvolvement).plot.bar()

pd.crosstab(df.Attrition,df.StockOptionLevel).plot.bar()
pd.crosstab(df.Attrition, df.JobLevel).plot.bar()

x_attr = ['JobLevel','StockOptionLevel','JobSatisfaction','EnvironmentSatisfaction','OverTime','Age','TotalWorkingYears','YearsAtCompany','MonthlyIncome']
df_y = df['Attrition']
df_x = df[x_attr]
X_train, X_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.5, random_state=0)
logr = LogisticRegression(max_iter=1000)
logr.fit(X_train,y_train)
y_pred = logr.predict(X_test)
accuracy_score(y_test,y_pred)

confusion_matrix(y_test, y_pred)
p = pd.DataFrame(y_pred)
p[0].value_counts()

logr.score(X_test, y_test)*100

classification_report(y_test, y_pred)

acc1 = cross_val_score(logr,df_x, df_y, cv=10, scoring='accuracy') #Cross Validation to check Overfitting.
acc1.mean()*100

#K-NN Model

knn = KNeighborsClassifier(n_neighbors = 10,metric ='euclidean')
X_train, X_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.5, random_state=0)
knn.fit(X_train, y_train)
y_predi = knn.predict(X_test)
confusion_matrix(y_test,y_predi)
knn.score(X_test, y_test)

plt.scatter(X_test['OverTime'],X_test['MonthlyIncome'],c=y_predi, cmap = 'coolwarm')

df_y.value_counts()

classification_report(y_test,y_predi)

acc2 = cross_val_score(knn, df_x, df_y, scoring='accuracy', cv=10) #Cross Validation to check Overfitting.
acc2.mean()*100

def logi_reg(x_var, y_var, t_size) :
    X_train, X_test, y_train, y_test = train_test_split(x_var, y_var, test_size = t_size, random_state =2)
    lr = LinearRegression(max_iter = 1000).fit(X_train,y_train)
    y_pred = lr.predict(X_test)
    score = accuracy_score(y_pred, y_test)      #This gives us the accuracy score of these predictions
    c_report = classification_report(y_test, y_pred)      #This report displays the F1-Measure, Precision, Recall
    
    return lr

def knn_class(x_var, y_var, t_size, k):
    X_train, X_test, y_train, y_test = train_test_split(x_var, y_var, test_size = t_size, random_state = 2)
    knn = KNeighborsClassifier(n_neighbours = k, metric = 'euclidean').fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    score = accuracy_score(y_pred, y_test)             #This gives us the accuracy score of these predictions
    c_report = classification_report(y_test, y_pred)   #This report displays the F1-Measure, Precision, Recall
    
    return knn

df["Attrition"].value_counts()/1470*100

classification_report(y_test,y_predi)

classification_report(y_test,y_pred)